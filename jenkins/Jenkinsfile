pipeline {
  agent any
  stages {
    stage('Initialize') {
      steps {
        script {
          echo "Workspace: ${env.WORKSPACE}"
          echo "Job Name: ${env.JOB_NAME}"
          echo "User: ${env.USER}"
        }
      }
    }
    stage('Build') {
      steps {
        script {
          sh './mvnw clean install -DskipTests'
          sh 'ls -la'
        }
      }
    }
    stage('Quality - SonarQube') {
      steps {
        // Name in System - SonarQube servers
        withSonarQubeEnv('SonarQube') {
          sh "./mvnw clean verify sonar:sonar -Dsonar.projectKey=webgoat -Dsonar.projectName='webgoat'"
        } 
      }
    }
    stage('Secrets - TruffleHog') {
      steps {
        sh 'docker run --rm trufflesecurity/trufflehog:latest github --repo https://github.com/xingcdev/WebGoat'
      }
    }
    stage('Snyk Scan') {
      steps {
        snykSecurity(
          snykInstallation: 'snyk', snykTokenId: 'snyk-api-token', projectName: 'WebGoat', failOnIssues: 'false'
        )
        script {
          echo "scan end"
        }
      }
    }
    stage('Deploy') {
      steps {
        echo 'Deploying...'
        sh './mvnw spring-boot:run > /dev/null 2>&1 &'
      }
    }
    stage('Verify Deploy') {
        steps {
            script {
                def url = 'http://127.0.0.1:8080/WebGoat'
                def response = httpRequest url: url, validResponseCodes: '200', ignoreSslErrors: true
                if (response.status == 200) {
                    echo "Success!."
                } else {
                    error "Failed ${url}."
                }
            }
        }
    }
  }
}
