pipeline {
  agent any
  parameters {
      string(name: 'PASSWORD', defaultValue: '', description: 'PASSWORD environment variable')
      string(name: 'JWT_VOTES_PASSWORD', defaultValue: '', description: 'JWT refresh password')
      string(name: 'JWT_REFRESH_PASSWORD', defaultValue: '', description: 'JWT votes password')
  }
  stages {
    stage('Initialize') {
      steps {
        script {
          echo "Workspace: ${env.WORKSPACE}"
          echo "Job Name: ${env.JOB_NAME}"
          echo "User: ${env.USER}"
        }
      }
    }
    stage('Build') {
      steps {
        script {
          sh './mvnw clean install -DskipTests -DPASSWORD=${params.PASSWORD} -DJWT_REFRESH_PASSWORD=${params.JWT_REFRESH_PASSWORd} -DJWT_VOTES_PASSWORD=${params.JWT_VOTES_PASSWORD}'
          sh 'ls -la'
        }
      }
    }
    stage('Quality - SonarQube') {
      steps {
        // Name in System - SonarQube servers
        withSonarQubeEnv('SonarQube') {
          sh "./mvnw clean verify sonar:sonar -Dsonar.projectKey=webgoat -Dsonar.projectName='webgoat'"
        } 
      }
    }
    stage('Secrets - TruffleHog') {
        when {
                expression { 
                    return env.SKIP_TRUFFLEHOG != 'true'
                }
            }
      steps {
        sh 'docker run --rm trufflesecurity/trufflehog:latest github --repo https://github.com/xingcdev/WebGoat'
      }
    }
    stage('Snyk Scan') {
      steps {
        snykSecurity(
          snykInstallation: 'snyk', snykTokenId: 'snyk-api-token', projectName: 'WebGoat', failOnIssues: 'false'
        )
        script {
          echo "scan end"
        }
      }
    }
    stage('Deploy') {
      steps {
        echo 'Deploying...'
        sh './mvnw spring-boot:run > /dev/null 2>&1 &'
      }
    }
  }
}
